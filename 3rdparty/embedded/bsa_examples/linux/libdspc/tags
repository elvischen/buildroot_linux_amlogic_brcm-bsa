!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AMLOGIC_VUI_SOLUTION_V6A_VOICEONLY_RELEASESIMPLE_H	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	11;"	d
AWE_AEC_Out_Delay_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	171;"	d
AWE_AEC_Out_Delay_currentDelay_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	183;"	d
AWE_AEC_Out_Delay_currentDelay_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	182;"	d
AWE_AEC_Out_Delay_currentDelay_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	184;"	d
AWE_AEC_Out_Delay_maxDelay_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	176;"	d
AWE_AEC_Out_Delay_maxDelay_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	175;"	d
AWE_AEC_Out_Delay_maxDelay_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	177;"	d
AWE_AEC_Out_Delay_stateHeap_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	194;"	d
AWE_AEC_Out_Delay_stateHeap_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	193;"	d
AWE_AEC_Out_Delay_stateHeap_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	195;"	d
AWE_AEC_Out_Delay_stateIndex_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	189;"	d
AWE_AEC_Out_Delay_stateIndex_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	188;"	d
AWE_AEC_Out_Delay_stateIndex_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	190;"	d
AWE_AEC_Out_Delay_state_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	199;"	d
AWE_AEC_Out_Delay_state_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	198;"	d
AWE_AEC_Out_Delay_state_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	200;"	d
AWE_FreqDomainProcessing____Direction_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	97;"	d
AWE_FreqDomainProcessing____Direction_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	101;"	d
AWE_FreqDomainProcessing____Direction_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	100;"	d
AWE_FreqDomainProcessing____Direction_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	102;"	d
AWE_FreqDomainProcessing____ManualDirection_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	151;"	d
AWE_FreqDomainProcessing____ManualDirection_indexPinFlag_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	155;"	d
AWE_FreqDomainProcessing____ManualDirection_indexPinFlag_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	154;"	d
AWE_FreqDomainProcessing____ManualDirection_indexPinFlag_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	156;"	d
AWE_FreqDomainProcessing____ManualDirection_index_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	163;"	d
AWE_FreqDomainProcessing____ManualDirection_index_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	162;"	d
AWE_FreqDomainProcessing____ManualDirection_index_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	164;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	109;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_enable_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	115;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_enable_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	114;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_enable_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	116;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	120;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	119;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	121;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_yRange_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	128;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_yRange_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	127;"	d
AWE_FreqDomainProcessing____NoiseReductionDB_yRange_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	129;"	d
AWE_FreqDomainProcessing____SetDirection_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	136;"	d
AWE_FreqDomainProcessing____SetDirection_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	143;"	d
AWE_FreqDomainProcessing____SetDirection_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	142;"	d
AWE_FreqDomainProcessing____SetDirection_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	144;"	d
AWE_InputMeter_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	17;"	d
AWE_InputMeter_attackCoeff_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	42;"	d
AWE_InputMeter_attackCoeff_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	41;"	d
AWE_InputMeter_attackCoeff_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	43;"	d
AWE_InputMeter_attackTime_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	30;"	d
AWE_InputMeter_attackTime_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	29;"	d
AWE_InputMeter_attackTime_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	31;"	d
AWE_InputMeter_meterType_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	24;"	d
AWE_InputMeter_meterType_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	23;"	d
AWE_InputMeter_meterType_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	25;"	d
AWE_InputMeter_releaseCoeff_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	48;"	d
AWE_InputMeter_releaseCoeff_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	47;"	d
AWE_InputMeter_releaseCoeff_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	49;"	d
AWE_InputMeter_releaseTime_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	36;"	d
AWE_InputMeter_releaseTime_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	35;"	d
AWE_InputMeter_releaseTime_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	37;"	d
AWE_InputMeter_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	53;"	d
AWE_InputMeter_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	52;"	d
AWE_InputMeter_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	54;"	d
AWE_LatencyControlSamps_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	61;"	d
AWE_LatencyControlSamps_currentDelay_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	73;"	d
AWE_LatencyControlSamps_currentDelay_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	72;"	d
AWE_LatencyControlSamps_currentDelay_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	74;"	d
AWE_LatencyControlSamps_maxDelay_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	66;"	d
AWE_LatencyControlSamps_maxDelay_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	65;"	d
AWE_LatencyControlSamps_maxDelay_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	67;"	d
AWE_LatencyControlSamps_stateHeap_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	84;"	d
AWE_LatencyControlSamps_stateHeap_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	83;"	d
AWE_LatencyControlSamps_stateHeap_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	85;"	d
AWE_LatencyControlSamps_stateIndex_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	79;"	d
AWE_LatencyControlSamps_stateIndex_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	78;"	d
AWE_LatencyControlSamps_stateIndex_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	80;"	d
AWE_LatencyControlSamps_state_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	89;"	d
AWE_LatencyControlSamps_state_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	88;"	d
AWE_LatencyControlSamps_state_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	90;"	d
AWE_LatencyPeak_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	219;"	d
AWE_LatencyPeak_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	223;"	d
AWE_LatencyPeak_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	222;"	d
AWE_LatencyPeak_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	224;"	d
AWE_OutputMeter_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	258;"	d
AWE_OutputMeter_attackCoeff_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	283;"	d
AWE_OutputMeter_attackCoeff_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	282;"	d
AWE_OutputMeter_attackCoeff_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	284;"	d
AWE_OutputMeter_attackTime_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	271;"	d
AWE_OutputMeter_attackTime_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	270;"	d
AWE_OutputMeter_attackTime_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	272;"	d
AWE_OutputMeter_meterType_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	265;"	d
AWE_OutputMeter_meterType_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	264;"	d
AWE_OutputMeter_meterType_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	266;"	d
AWE_OutputMeter_releaseCoeff_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	289;"	d
AWE_OutputMeter_releaseCoeff_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	288;"	d
AWE_OutputMeter_releaseCoeff_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	290;"	d
AWE_OutputMeter_releaseTime_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	277;"	d
AWE_OutputMeter_releaseTime_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	276;"	d
AWE_OutputMeter_releaseTime_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	278;"	d
AWE_OutputMeter_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	294;"	d
AWE_OutputMeter_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	293;"	d
AWE_OutputMeter_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	295;"	d
AWE_VR_State_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	243;"	d
AWE_VR_State_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	250;"	d
AWE_VR_State_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	249;"	d
AWE_VR_State_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	251;"	d
AWE_endIndex_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	207;"	d
AWE_endIndex_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	211;"	d
AWE_endIndex_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	210;"	d
AWE_endIndex_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	212;"	d
AWE_isTriggered_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	231;"	d
AWE_isTriggered_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	235;"	d
AWE_isTriggered_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	234;"	d
AWE_isTriggered_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	236;"	d
AWE_startIndex_ID	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	302;"	d
AWE_startIndex_value_MASK	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	306;"	d
AWE_startIndex_value_OFFSET	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	305;"	d
AWE_startIndex_value_SIZE	AMLogic_VUI_Solution_v6a_VoiceOnly_releaseSimple.h	307;"	d
BASEHELPERS_H_INCLUDED	basehelpers.h	28;"	d
BUFFER_SIZE	PortAudioMicrophoneWrapper.cpp	67;"	d	file:
BYTE	utiltypes.h	76;"	d
CAWELib	awelib.h	/^struct CAWELib$/;"	s
CC	Makefile	/^CC=$(COMPILE_CROSS)g++$/;"	m
CC	test/Makefile	/^CC=$(COMPILE_CROSS)g++$/;"	m
CFLAGS	Makefile	/^CFLAGS := -Wall -O3 -std=c++0x -fpic -D_GLIBCXX_USE_NANOSLEEP -I\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/output\/mesonaxg_s400_32_release\/host\/usr\/arm-linux-gnueabihf\/sysroot\/usr\/include\/ $/;"	m
CFLAGS	test/Makefile	/^CFLAGS := -I..\/ -Wall -O3 -std=c++0x -fpic -D_GLIBCXX_USE_NANOSLEEP  -I\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/output\/mesonaxg_s400_32_release\/host\/usr\/arm-linux-gnueabihf\/sysroot\/usr\/include\/$/;"	m
COMPILE_CROSS	Makefile	/^COMPILE_CROSS=\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/toolchain\/gcc\/linux-x86\/arm\/gcc-linaro-arm-linux-gnueabihf-4.9\/bin\/arm-linux-gnueabihf-$/;"	m
COMPILE_CROSS	test/Makefile	/^COMPILE_CROSS=\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/toolchain\/gcc\/linux-x86\/arm\/gcc-linaro-arm-linux-gnueabihf-4.9\/bin\/arm-linux-gnueabihf-$/;"	m
CTcpIO2	TcpIO2.h	/^class CTcpIO2$/;"	c
ClearQueue	TcpIO2.h	/^	void ClearQueue()$/;"	f	class:CTcpIO2
DLLSYMBOL	utiltypes.h	60;"	d
DSP_DEBUG	PortAudioMicrophoneWrapper.cpp	70;"	d	file:
DSP_SOCKET	PortAudioMicrophoneWrapper.cpp	71;"	d	file:
DWORD	utiltypes.h	84;"	d
Dual	basehelpers.h	/^	Dual(bool ownsStorage = true)$/;"	f	class:Dual
Dual	basehelpers.h	/^template <class T> class Dual$/;"	c
ERR_ArgumentCount	basehelpers.h	76;"	d
ERR_ArgumentError	basehelpers.h	79;"	d
ERR_BadData	basehelpers.h	94;"	d
ERR_CMD_CantGetArray	basehelpers.h	67;"	d
ERR_CMD_CantGetArrayElement	basehelpers.h	73;"	d
ERR_CMD_CantGetArrayLength	basehelpers.h	70;"	d
ERR_CMD_WrongNumberOfArgs	basehelpers.h	64;"	d
ERR_CSVSyntax	basehelpers.h	97;"	d
ERR_CantCreate	basehelpers.h	100;"	d
ERR_Exception	basehelpers.h	52;"	d
ERR_FileReadError	basehelpers.h	91;"	d
ERR_FileWriteError	basehelpers.h	85;"	d
ERR_JscriptError	basehelpers.h	82;"	d
ERR_NoRegistry	basehelpers.h	61;"	d
ERR_NoSuchFile	basehelpers.h	88;"	d
ERR_NoSuchObject	basehelpers.h	58;"	d
ERR_NotSupported	basehelpers.h	55;"	d
ERR_Success	basehelpers.h	46;"	d
ERR_WaitNotify	basehelpers.h	49;"	d
E_FAIL	utiltypes.h	40;"	d
EraseFirstItem	TcpIO2.h	/^	void EraseFirstItem()$/;"	f	class:CTcpIO2
FAILED	utiltypes.h	56;"	d
File2	basehelpers.h	/^class File2$/;"	c
GetByte	TcpIO2.h	/^	unsigned char GetByte(size_t i) const$/;"	f	struct:SReceiveMessage
GetData	TcpIO2.h	/^	unsigned char *GetData()$/;"	f	struct:SReceiveMessage
GetStr	basehelpers.h	/^	inline const char *GetStr(size_t idx) const$/;"	f	class:Dual
GetValue	basehelpers.h	/^	inline T *GetValue(size_t idx)$/;"	f	class:Dual
GetValue	basehelpers.h	/^	inline const T *GetValue(size_t idx) const$/;"	f	class:Dual
HIWORD	utiltypes.h	92;"	d
HRESULT	utiltypes.h	64;"	d
HWND	utiltypes.h	72;"	d
IN	utiltypes.h	28;"	d
INT32	awelib.h	38;"	d
INVALID_SOCKET	TcpIO2.h	65;"	d
IN_OUT	utiltypes.h	36;"	d
IsConnected	TcpIO2.h	/^	int IsConnected() const$/;"	f	class:CTcpIO2
LDFLAGS	Makefile	/^LDFLAGS := -lpthread -L\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/output\/mesonaxg_s400_32_release\/target\/usr\/lib32  -lasound -L$(LIBPATH) -l$(LIBVAR) $/;"	m
LDFLAGS	test/Makefile	/^LDFLAGS := -lpthread -L\/mnt\/nfsroot\/peipeng.zhao\/A113-buildroot2\/output\/mesonaxg_s400_32_release\/target\/usr\/lib32  -lasound -L$(LIBPATH) -l$(LIBVAR) -L..\/ -ldspc  $/;"	m
LIBPATH	Makefile	/^LIBPATH=.\/lib$/;"	m
LIBPATH	test/Makefile	/^LIBPATH=..\/lib$/;"	m
LIBVAR	Makefile	/^LIBVAR=AWELib$/;"	m
LIBVAR	test/Makefile	/^LIBVAR=AWELib$/;"	m
LOWORD	utiltypes.h	96;"	d
LPHOSTENT	TcpIO2.h	/^typedef struct hostent* LPHOSTENT;$/;"	t	typeref:struct:hostent
LRESULT	utiltypes.h	48;"	d
MAKE_ADDRESS	awelib.h	26;"	d
MAKE_LAYOUT_ADDRESS	awelib.h	31;"	d
MAKE_WIRE_ADDRESS	awelib.h	29;"	d
MAX_COMMAND_BUFFER_LEN	awelib.h	48;"	d
MAX_RECEIVE_BYTES	TcpIO2.h	81;"	d
MakeArgv	basehelpers.h	/^	inline const char **MakeArgv(size_t &count)$/;"	f	class:string_vector
NUM_INPUT_CHANNELS	PortAudioMicrophoneWrapper.cpp	/^static const int NUM_INPUT_CHANNELS = 8;$/;"	v	file:
NUM_OUTPUT_CHANNELS	PortAudioMicrophoneWrapper.cpp	/^static const int NUM_OUTPUT_CHANNELS = 0;$/;"	v	file:
NotifyFunction	PortAudioMicrophoneWrapper.cpp	/^static void NotifyFunction(void *pAwe, int count)$/;"	f	file:
OUT	utiltypes.h	32;"	d
PERIOD_SIZE	PortAudioMicrophoneWrapper.cpp	68;"	d	file:
PREFERRED_SAMPLES_PER_CALLBACK_FOR_ALSA	PortAudioMicrophoneWrapper.cpp	/^static const unsigned long PREFERRED_SAMPLES_PER_CALLBACK_FOR_ALSA = 256;$/;"	v	file:
PREFERRED_SAMPLES_PER_CALLBACK_FOR_ALSA	test/main.c	/^unsigned long PREFERRED_SAMPLES_PER_CALLBACK_FOR_ALSA = 256;$/;"	v
PREFERRED_SAMPLES_PER_CALLBACK_FOR_DSP	PortAudioMicrophoneWrapper.cpp	/^static const unsigned long PREFERRED_SAMPLES_PER_CALLBACK_FOR_DSP = 768;$/;"	v	file:
PortAudioMicrophoneWrapper	PortAudioMicrophoneWrapper.cpp	/^PortAudioMicrophoneWrapper::PortAudioMicrophoneWrapper() {$/;"	f	class:PortAudioMicrophoneWrapper
PortAudioMicrophoneWrapper	PortAudioMicrophoneWrapper.h	/^class PortAudioMicrophoneWrapper {$/;"	c
QueueItem	TcpIO2.h	/^	const char *QueueItem() const$/;"	f	class:CTcpIO2
QueueSize	TcpIO2.h	/^	size_t QueueSize() const$/;"	f	class:CTcpIO2
READ_FRAME	PortAudioMicrophoneWrapper.cpp	66;"	d	file:
REC_DEVICE_NAME	PortAudioMicrophoneWrapper.cpp	31;"	d	file:
RING_BUFFER_SIZE	PortAudioMicrophoneWrapper.cpp	/^static const unsigned long RING_BUFFER_SIZE = PREFERRED_SAMPLES_PER_CALLBACK_FOR_DSP * NUM_INPUT_CHANNELS * 30;$/;"	v	file:
RING_PCM_SIZE	PortAudioMicrophoneWrapper.cpp	75;"	d	file:
SAMPLE_RATE	PortAudioMicrophoneWrapper.cpp	/^static const double SAMPLE_RATE = 48000;$/;"	v	file:
SAMPLE_RATE	PortAudioMicrophoneWrapper.cpp	64;"	d	file:
SOCKET	TcpIO2.h	/^typedef int				SOCKET;$/;"	t
SOCKET_ERROR	TcpIO2.h	68;"	d
SReceiveMessage	TcpIO2.h	/^struct SReceiveMessage$/;"	s
SUCCEEDED	utiltypes.h	68;"	d
S_OK	utiltypes.h	44;"	d
Sample	awelib.h	/^Sample;$/;"	t	typeref:union:_Sample
SetConnectLossFunction	TcpIO2.h	/^	void SetConnectLossFunction(void *pData, void (*pLoseConnectFunction)(void *pData))$/;"	f	class:CTcpIO2
SetNotifyFunction	TcpIO2.h	/^	void SetNotifyFunction(void *pData, void (*pNotifyFunction)(void *pData, int count))$/;"	f	class:CTcpIO2
SetNotifyWindow	TcpIO2.h	/^	void SetNotifyWindow(HWND hWnd, DWORD message)$/;"	f	class:CTcpIO2
SetOwnsStorage	basehelpers.h	/^	void SetOwnsStorage(bool owns)$/;"	f	class:Dual
SetStr	basehelpers.h	/^	inline void SetStr(size_t idx, const char *str)$/;"	f	class:Dual
SetStr	basehelpers.h	/^	inline void SetStr(size_t idx, const std::string &str)$/;"	f	class:Dual
TAR	Makefile	/^TAR=libdspc.so$/;"	m
TAR	test/Makefile	/^TAR=dspc_test$/;"	m
TCP_MAGIC	TcpIO2.h	119;"	d
UINT	utiltypes.h	88;"	d
UINT32	awelib.h	34;"	d
UINT64	awelib.h	42;"	d
WM_TCPIP_BINARYMESSAGE	TcpIO2.h	126;"	d
WM_TCPIP_MESSAGE	TcpIO2.h	123;"	d
WORD	utiltypes.h	80;"	d
WRITE_DEVICE_NAME	PortAudioMicrophoneWrapper.cpp	65;"	d	file:
WRITE_UNIT	PortAudioMicrophoneWrapper.cpp	74;"	d	file:
_PORT_AUDIO_MICROPHONE_WRAPPER_H_	PortAudioMicrophoneWrapper.h	19;"	d
_Sample	awelib.h	/^typedef union _Sample$/;"	u
_TCPIO2_H_INCLUDED_	TcpIO2.h	30;"	d
_UTILTYPES_H_INCLUDED	utiltypes.h	23;"	d
__AWELIB_H_INCLUDED__	awelib.h	23;"	d
_closeStream	basehelpers.h	/^	bool _closeStream;$/;"	m	class:File2
_stream	basehelpers.h	/^	FILE *_stream;$/;"	m	class:File2
afx_msg	utiltypes.h	52;"	d
append	basehelpers.h	/^	inline void append(const char *s)$/;"	f	class:string_vector
append	basehelpers.h	/^	inline void append(const char *s, const T *p = 0)$/;"	f	class:Dual
append	basehelpers.h	/^	inline void append(const string &s)$/;"	f	class:string_vector
append	basehelpers.h	/^	inline void append(const string &s, const T *p = 0)$/;"	f	class:Dual
append	basehelpers.h	/^	inline void append(size_t argc, const char **argv)$/;"	f	class:string_vector
audioData_SDS	PortAudioMicrophoneWrapper.cpp	/^std::vector<int16_t> audioData_SDS;$/;"	v
clear	basehelpers.h	/^	inline void clear()$/;"	f	class:Dual
commandBuf	PortAudioMicrophoneWrapper.cpp	/^static UINT32 commandBuf[MAX_COMMAND_BUFFER_LEN];$/;"	v	file:
compare_dual_strings	basehelpers.h	/^	static bool compare_dual_strings(const pair<string, T *>& s1, const pair<string, T *>& s2)$/;"	f	class:Dual
compare_duali_strings	basehelpers.h	/^	static bool compare_duali_strings(const pair<string, T *>& s1, const pair<string, T *>& s2)$/;"	f	class:Dual
compare_vectors	basehelpers.h	/^inline bool compare_vectors(const vector<T> &v1, const vector<T> &v2)$/;"	f
convert	PortAudioMicrophoneWrapper.cpp	/^int convert(int *input, short *output, int frame_num)$/;"	f
convert1	PortAudioMicrophoneWrapper.cpp	/^int convert1(int *input, int *output, int frame_num)$/;"	f
convert_DSP	PortAudioMicrophoneWrapper.cpp	/^void convert_DSP(int* input , short *output , int frame_num)$/;"	f
convert_DSP_2ch	PortAudioMicrophoneWrapper.cpp	/^void convert_DSP_2ch(int* input , short *output , int frame_num)$/;"	f
create	PortAudioMicrophoneWrapper.cpp	/^std::unique_ptr<PortAudioMicrophoneWrapper> PortAudioMicrophoneWrapper::create() {$/;"	f	class:PortAudioMicrophoneWrapper
debug_pcm_write	PortAudioMicrophoneWrapper.h	/^    std::thread debug_pcm_write;$/;"	m	class:PortAudioMicrophoneWrapper
detach	basehelpers.h	/^	inline T *detach(size_t idx)$/;"	f	class:Dual
do_debug_pcm_write	PortAudioMicrophoneWrapper.cpp	/^void PortAudioMicrophoneWrapper::do_debug_pcm_write()$/;"	f	class:PortAudioMicrophoneWrapper
do_dsp_data_output	PortAudioMicrophoneWrapper.cpp	/^void PortAudioMicrophoneWrapper::do_dsp_data_output(short *output, int  *num)$/;"	f	class:PortAudioMicrophoneWrapper
do_dsp_processing	PortAudioMicrophoneWrapper.cpp	/^void PortAudioMicrophoneWrapper::do_dsp_processing() {$/;"	f	class:PortAudioMicrophoneWrapper
do_dsp_processing_fn	PortAudioMicrophoneWrapper.cpp	/^void do_dsp_processing_fn(int* in_samples , int* out_samples , int inCount , int outCount , int& result , Sample* startIndex,$/;"	f
do_pcm_read	PortAudioMicrophoneWrapper.cpp	/^void PortAudioMicrophoneWrapper::do_pcm_read() {$/;"	f	class:PortAudioMicrophoneWrapper
dsp_process	PortAudioMicrophoneWrapper.h	/^    std::thread dsp_process;$/;"	m	class:PortAudioMicrophoneWrapper
fVal	awelib.h	/^	float fVal;$/;"	m	union:_Sample
fill_write_buffer	PortAudioMicrophoneWrapper.cpp	/^void fill_write_buffer(int* input)$/;"	f
fill_write_buffer1	PortAudioMicrophoneWrapper.cpp	/^void fill_write_buffer1(int* input)$/;"	f
find	basehelpers.h	/^	inline int find(const char *s, size_t st = 0) const$/;"	f	class:Dual
findi	basehelpers.h	/^	inline int findi(const char *s, size_t st = 0) const$/;"	f	class:Dual
fp_input	PortAudioMicrophoneWrapper.cpp	/^FILE* fp_input ; FILE* fp_output;$/;"	v
fp_output	PortAudioMicrophoneWrapper.cpp	/^FILE* fp_input ; FILE* fp_output;$/;"	v
get_dspc_data	DSPC_interface.cpp	/^int get_dspc_data(short *databuf, int *data_cnt)$/;"	f
iVal	awelib.h	/^	INT32 iVal;$/;"	m	union:_Sample
inCount	PortAudioMicrophoneWrapper.cpp	/^UINT32 inCount = 0;$/;"	v
in_chans	PortAudioMicrophoneWrapper.cpp	/^UINT32 in_chans = 0;$/;"	v
in_samples	PortAudioMicrophoneWrapper.cpp	/^std::vector<int> in_samples;$/;"	v
in_samps	PortAudioMicrophoneWrapper.cpp	/^UINT32 in_samps = 0;$/;"	v
initialize	PortAudioMicrophoneWrapper.cpp	/^bool PortAudioMicrophoneWrapper::initialize() {$/;"	f	class:PortAudioMicrophoneWrapper
insert	basehelpers.h	/^	inline size_t insert(const char *s, size_t idx, const T *p = 0)$/;"	f	class:Dual
insert	basehelpers.h	/^	inline size_t insert(const string &s, size_t idx, const T *p = 0)$/;"	f	class:Dual
loopCount	PortAudioMicrophoneWrapper.cpp	/^int loopCount = 0;$/;"	v
m_BinaryMsgQueue	TcpIO2.h	/^	vector<SReceiveMessage *> m_BinaryMsgQueue;$/;"	m	class:CTcpIO2
m_BinaryReadBuffer	TcpIO2.h	/^	char m_BinaryReadBuffer[MAX_RECEIVE_BYTES];$/;"	m	class:CTcpIO2
m_CurrentReplyMsg	TcpIO2.h	/^	SReceiveMessage m_CurrentReplyMsg;$/;"	m	class:CTcpIO2
m_active_socket	TcpIO2.h	/^	SOCKET m_active_socket;$/;"	m	class:CTcpIO2
m_bTerminateListenerThread	TcpIO2.h	/^	bool m_bTerminateListenerThread;$/;"	m	class:CTcpIO2
m_connected	TcpIO2.h	/^	bool m_connected;$/;"	m	class:CTcpIO2
m_data	TcpIO2.h	/^	vector<BYTE> m_data;$/;"	m	struct:SReceiveMessage
m_hBinaryListenSocket	TcpIO2.h	/^	SOCKET m_hBinaryListenSocket;$/;"	m	class:CTcpIO2
m_hEvent	TcpIO2.h	/^	HANDLE m_hEvent;$/;"	m	class:CTcpIO2
m_hEvent_Binary	TcpIO2.h	/^	HANDLE m_hEvent_Binary;$/;"	m	class:CTcpIO2
m_hListenSock	TcpIO2.h	/^	SOCKET m_hListenSock;$/;"	m	class:CTcpIO2
m_hServerSocket	TcpIO2.h	/^	SOCKET m_hServerSocket;$/;"	m	class:CTcpIO2
m_hWindow	TcpIO2.h	/^	HWND m_hWindow;$/;"	m	class:CTcpIO2
m_in_read_buffer	TcpIO2.h	/^	size_t m_in_read_buffer;$/;"	m	class:CTcpIO2
m_listenThreadRunning	TcpIO2.h	/^	bool m_listenThreadRunning;$/;"	m	class:CTcpIO2
m_lpHostEnt	TcpIO2.h	/^	LPHOSTENT m_lpHostEnt;$/;"	m	class:CTcpIO2
m_message	TcpIO2.h	/^	unsigned int m_message;$/;"	m	class:CTcpIO2
m_mutex	PortAudioMicrophoneWrapper.h	/^    std::mutex m_mutex;$/;"	m	class:PortAudioMicrophoneWrapper
m_nProtocolPort	TcpIO2.h	/^	WORD m_nProtocolPort;$/;"	m	class:CTcpIO2
m_owns_storage	basehelpers.h	/^	bool m_owns_storage;$/;"	m	class:Dual
m_pBinaryListenerThread	TcpIO2.h	/^	CWinThread *m_pBinaryListenerThread;$/;"	m	class:CTcpIO2
m_pBinaryListenerThread	TcpIO2.h	/^	pthread_t m_pBinaryListenerThread;$/;"	m	class:CTcpIO2
m_pListenerThread	TcpIO2.h	/^	CWinThread *m_pListenerThread;$/;"	m	class:CTcpIO2
m_pListenerThread	TcpIO2.h	/^	pthread_t m_pListenerThread;$/;"	m	class:CTcpIO2
m_pLoseConnectData	TcpIO2.h	/^	void *m_pLoseConnectData;$/;"	m	class:CTcpIO2
m_pLoseConnectFunction	TcpIO2.h	/^	void (*m_pLoseConnectFunction)(void *pData);$/;"	m	class:CTcpIO2
m_pNotifyData	TcpIO2.h	/^	void *m_pNotifyData;$/;"	m	class:CTcpIO2
m_pNotifyFunction	TcpIO2.h	/^	void (*m_pNotifyFunction)(void *pData, int count);$/;"	m	class:CTcpIO2
m_queue	TcpIO2.h	/^	string_vector m_queue;$/;"	m	class:CTcpIO2
m_queue_critical_section	TcpIO2.h	/^	CCriticalSection m_queue_critical_section;$/;"	m	class:CTcpIO2
m_queue_critical_section	TcpIO2.h	/^	pthread_mutex_t m_queue_critical_section;$/;"	m	class:CTcpIO2
m_read_buffer	TcpIO2.h	/^	char m_read_buffer[MAX_RECEIVE_BYTES];$/;"	m	class:CTcpIO2
m_tuning_attr	TcpIO2.h	/^	pthread_attr_t m_tuning_attr;$/;"	m	class:CTcpIO2
m_tuning_schedParam	TcpIO2.h	/^	struct sched_param m_tuning_schedParam;$/;"	m	class:CTcpIO2	typeref:struct:CTcpIO2::sched_param
m_vector	basehelpers.h	/^	vector<pair<string, T *> > m_vector;$/;"	m	class:Dual
main	test/main.c	/^int main()$/;"	f
obj	Makefile	/^obj=PortAudioMicrophoneWrapper.cpp DSPC_interface.cpp$/;"	m
obj	test/Makefile	/^obj=main.c$/;"	m
operator ==	basehelpers.h	/^	inline bool operator==(const string_vector &src) const$/;"	f	class:string_vector
operator []	basehelpers.h	/^	inline const string &operator[](size_t idx) const$/;"	f	class:Dual
outCount	PortAudioMicrophoneWrapper.cpp	/^UINT32 outCount = 0;$/;"	v
out_chans	PortAudioMicrophoneWrapper.cpp	/^UINT32 out_chans = 0;$/;"	v
out_samples	PortAudioMicrophoneWrapper.cpp	/^std::vector<int> out_samples;$/;"	v
out_samps	PortAudioMicrophoneWrapper.cpp	/^UINT32 out_samps = 0;$/;"	v
pAwelib	PortAudioMicrophoneWrapper.cpp	/^CAWELib *pAwelib;$/;"	v
pcm_read_thread	PortAudioMicrophoneWrapper.h	/^    std::thread pcm_read_thread;$/;"	m	class:PortAudioMicrophoneWrapper
prev_state	PortAudioMicrophoneWrapper.cpp	/^int prev_state  = 0;$/;"	v
ptcpIO	PortAudioMicrophoneWrapper.cpp	/^static CTcpIO2 *ptcpIO = 0;$/;"	v	file:
puts	basehelpers.h	/^	inline size_t puts(const char *buf)$/;"	f	class:File2
readChar	basehelpers.h	/^	inline int readChar()$/;"	f	class:File2
remove	basehelpers.h	/^	inline bool remove(size_t idx)$/;"	f	class:Dual
replace	basehelpers.h	/^	inline bool replace(const char *s, size_t idx, const T *p = 0)$/;"	f	class:Dual
replace	basehelpers.h	/^	inline bool replace(const string &s, size_t idx, const T *p = 0)$/;"	f	class:Dual
ring_buffer	PortAudioMicrophoneWrapper.cpp	/^std::vector<int> ring_buffer;$/;"	v
ring_pcm_buffer	PortAudioMicrophoneWrapper.cpp	/^int ring_pcm_buffer[RING_PCM_SIZE];$/;"	v
rp	PortAudioMicrophoneWrapper.cpp	/^volatile int rp = 0 ;$/;"	v
rp_pcm	PortAudioMicrophoneWrapper.cpp	/^volatile int rp_pcm = 0 ;$/;"	v
s_partial	PortAudioMicrophoneWrapper.cpp	/^static UINT32 s_partial = 0;$/;"	v	file:
s_pktLen	PortAudioMicrophoneWrapper.cpp	/^static UINT32 s_pktLen = 0;$/;"	v	file:
setup_DSP	PortAudioMicrophoneWrapper.cpp	/^void setup_DSP() {$/;"	f
size	TcpIO2.h	/^	size_t size() const$/;"	f	struct:SReceiveMessage
size	basehelpers.h	/^	inline size_t size() const$/;"	f	class:Dual
sort	basehelpers.h	/^	inline void sort(size_t st = 0)$/;"	f	class:Dual
sorti	basehelpers.h	/^	inline void sorti(size_t st = 0)$/;"	f	class:Dual
string_map	basehelpers.h	/^class string_map : public map<string, string>$/;"	c
string_vector	basehelpers.h	/^class string_vector: public vector<string>$/;"	c
uiVal	awelib.h	/^	UINT32 uiVal;$/;"	m	union:_Sample
valid	basehelpers.h	/^	inline bool valid() const$/;"	f	class:File2
wp	PortAudioMicrophoneWrapper.cpp	/^volatile int wp = 0;$/;"	v
wp_pcm	PortAudioMicrophoneWrapper.cpp	/^volatile int wp_pcm = 0;$/;"	v
wrapper	PortAudioMicrophoneWrapper.cpp	/^PortAudioMicrophoneWrapper* wrapper;$/;"	v
write	basehelpers.h	/^	inline size_t write(const void *p, size_t len)$/;"	f	class:File2
write_pcm_buffer	PortAudioMicrophoneWrapper.cpp	/^int write_pcm_buffer[WRITE_UNIT];$/;"	v
~CAWELib	awelib.h	/^	virtual ~CAWELib()$/;"	f	struct:CAWELib
~Dual	basehelpers.h	/^	~Dual()$/;"	f	class:Dual
~PortAudioMicrophoneWrapper	PortAudioMicrophoneWrapper.cpp	/^PortAudioMicrophoneWrapper::~PortAudioMicrophoneWrapper() {$/;"	f	class:PortAudioMicrophoneWrapper
